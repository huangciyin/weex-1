buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath files('license/license-gradle-plugin-0.12.1.jar')
        classpath files('license/maven-license-plugin-1.10.b1.jar')
        classpath files('license/plexus-utils-3.0.24.jar')
        classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.5.0'
    }
}


allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'checkstyle'

ext.disableCov = project.hasProperty('disableCov') ? project.getProperty('disableCov') : 'false'

if(!disableCov.toBoolean()){
    apply plugin: 'com.vanniktech.android.junit.jacoco'
    junitJacoco {
        excludes = ['com/taobao/weex/dom/flex/**','com/taobao/weex/ui/view/refresh/circlebar/**']
    }
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/quality/checkstyle.xml") // Where my checkstyle config is...
    // configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath // Where is my suppressions file for checkstyle is...
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/test/**'
    exclude '**/com/taobao/weex/dom/flex/**'
    classpath = files()
    
}

checkstyle {
    toolVersion = '6.9'
}

version = "0.8.0.1"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    resourcePrefix "weex"

    useLibrary 'org.apache.http.legacy'

    def jsfmVersion = "0.15.2"
    try{
        def line
        new File("assets/main.js").withReader { line = it.readLine() }
        def m = line =~ /[A-Z\s]+\:\s+([0-9\.]+)\s+Build\s+[0-9]+/;
        jsfmVersion = m[0][1]
        println jsfmVersion
    } catch (java.lang.Exception e) {

    }

    defaultConfig {
        buildConfigField "String", "buildJavascriptFrameworkVersion", "\"${jsfmVersion}\""
        buildConfigField "String", "buildVersion", "\"${version}\""
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi","x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['assets']
            jniLibs.srcDir(['libs'])
            java {
                srcDirs = ["src/main/java"];
            }
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    compileOptions.encoding = "UTF-8"
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    testOptions {
        unitTests.all {
            jvmArgs += ['-XX:-UseSplitVerifier', '-noverify','-Xverify:none']/* fix VerifyError  */
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    provided 'com.android.support:recyclerview-v7:23.1.1'
    provided 'com.android.support:support-v4:23.1.1'
    provided 'com.android.support:appcompat-v7:23.1.1'
    provided 'com.alibaba:fastjson:1.1.46.android'

    testCompile 'com.alibaba:fastjson:1.1.46.android'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.javassist:javassist:3.20.0-GA'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'org.powermock:powermock-core:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-common:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-legacy:1.6.4'
    testCompile 'org.powermock:powermock-module-testng:1.6.4'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.4'
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.4"
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile "org.robolectric:shadows-httpclient:3.0"
    testCompile 'org.json:json:20160212'
}

license{
    header=file('license/LICENSE')
    excludes (["**/WXDataStructureUtil.java",
               "**/Spacing.java",
               "**/MeasureOutput.java",
               "**/LayoutEngine.java",
               "**/FloatUtil.java",
               "**/CSSWrap.java",
               "**/CSSStyle.java",
               "**/CSSPositionType.java",
               "**/CSSNode.java",
               "**/CSSLayoutContext.java",
               "**/CSSLayout.java",
               "**/CSSJustify.java",
               "**/CSSFlexDirection.java",
               "**/CSSDirection.java",
               "**/CSSConstants.java",
               "**/CSSAlign.java",
               "**/CachedCSSLayout.java",
               "**/CSSAlignConvert.java",
               "**/CSSFlexDirectionConvert.java",
               "**/CSSJustifyConvert.java",
               "**/CSSPositionTypeConvert.java",
               "**/CSSTransformFromStyle.java",
               "**/CSSWrapConvert.java",
               "**/WXTextDomObject.java",
               "**/WXCustomStyleSpan.java"])
}
preBuild.dependsOn licenseFormat

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def siteUrl = 'https://github.com/alibaba/weex_android'
def gitUrl = 'https://github.com/alibaba/weex_android.git'
group = "com.taobao.android"
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name 'weex_sdk'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'weex alibaba'
                        name 'weex alibaba'
                        email 'alibabaweex@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

android.libraryVariants.all { variant ->
    println variant.javaCompile.classpath.files
    if(variant.name == 'release') { //我们只需 release 的 javadoc
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            // title = ''
            // description = ''
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            options {
                encoding "utf-8"
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
        }
    }
}

bintray {
    user = "alibabaweex"
    key = "171795c1feb7cff7766c06dafa7c7b4672653a50"
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "weex_sdk"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}